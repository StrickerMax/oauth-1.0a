{"name":"Oauth-1.0a","tagline":"OAuth 1.0a Request Authorization for Node and Browser","body":"oauth-1.0a\r\n==========\r\n\r\n[![Dependencies](https://api.travis-ci.org/ddo/oauth-1.0a.png)](https://travis-ci.org/ddo/oauth-1.0a)\r\n[![Dependency Status](https://david-dm.org/ddo/oauth-1.0a.png?theme=shields.io)](https://david-dm.org/ddo/oauth-1.0a)\r\n[![NPM version](https://badge.fury.io/js/oauth-1.0a.png)](http://badge.fury.io/js/oauth-1.0a)\r\n\r\nOAuth 1.0a Request Authorization for **Node** and **Browser**\r\n\r\nSend OAuth request with your favorite HTTP client ([request](https://github.com/mikeal/request), [jQuery.ajax](http://api.jquery.com/jQuery.ajax/)...)\r\n\r\nNo more headache about OAuth 1.0a's stuff or \"oauth_consumer_key, oauth_nonce, oauth_signature....\" parameters, just use your familiar HTTP client to send OAuth requests.\r\n\r\nTested on some popular OAuth 1.0a services:\r\n\r\n* Twitter\r\n* Flickr\r\n* Bitbucket\r\n* Linkedin\r\n\r\n## Quick Start\r\n\r\n```js\r\nvar oauth = new OAuth({\r\n    consumer: {\r\n        public: '<your consumer key>',\r\n        secret: '<your consumer secret>'\r\n    },\r\n    signature_method: '<signature method>' //HMAC-SHA1 or PLAINTEXT ...\r\n});\r\n```\r\n\r\nGet OAuth request data then you can use with your http client easily :)\r\n```js\r\noauth.authorize(request, token);\r\n```\r\n\r\nOr if you want to get as a header key-value data\r\n```js\r\noauth.toHeader(oauth_data);\r\n```\r\n\r\n\r\n##Installation\r\n\r\n###Node.js\r\n    $ npm install oauth-1.0a\r\n    \r\n###Browser\r\nDownload oauth-1.0a.js [here](https://github.com/ddo/oauth-1.0a/blob/v0.0.6/lib/oauth-1.0a.js)\r\n\r\n    <script src=\"http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/hmac-sha1.js\"></script>\r\n    <script src=\"http://crypto-js.googlecode.com/svn/tags/3.1.2/build/components/enc-base64-min.js\"></script>\r\n    <script src=\"oauth-1.0a.js\"></script>\r\n\r\n##Examples\r\n\r\n###Work with [request](https://github.com/mikeal/request) (Node.js)\r\n\r\nDepencies\r\n\r\n```js\r\nvar request = require('request');\r\nvar OAuth   = require('oauth-1.0a');\r\n```\r\n\r\nInit\r\n```js\r\nvar oauth = new OAuth({\r\n    consumer: {\r\n        public: 'xvz1evFS4wEEPTGEFPHBog',\r\n        secret: 'kAcSOqF21Fu85e7zjz7ZN2U4ZRhfV3WpwPAoE3Z7kBw'\r\n    },\r\n    signature_method: 'HMAC-SHA1'\r\n});\r\n```\r\n\r\nYour request data\r\n```js\r\nvar request_data = {\r\n\turl: 'https://api.twitter.com/1/statuses/update.json?include_entities=true',\r\n    method: 'POST',\r\n    data: {\r\n        status: 'Hello Ladies + Gentlemen, a signed OAuth request!'\r\n    }\r\n};\r\n```\r\n\r\nYour token (optional for some requests)\r\n```js\r\nvar token = {\r\n    public: '370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb',\r\n    secret: 'LswwdoUaIvS8ltyTt5jkRh4J50vUPVVHtR2YPi5kE'\r\n};\r\n```\r\n\r\nCall a request\r\n\r\n```js\r\nrequest({\r\n\turl: request_data.url,\r\n\tmethod: request_data.method,\r\n\tform: oauth.authorize(request_data, token)\r\n}, function(error, response, body) {\r\n\t//process your data here\r\n});\r\n```\r\n\r\nOr if you want to send OAuth data in request's header\r\n\r\n```js\r\nrequest({\r\n\turl: request_data.url,\r\n\tmethod: request_data.method,\r\n\tform: request_data.data,\r\n\theaders: oauth.toHeader(oauth.authorize(request_data, token))\r\n}, function(error, response, body) {\r\n\t//process your data here\r\n});\r\n```\r\n\r\n###Work with [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) (Browser)\r\n\r\n**Caution:** please make sure you understand what happen when use OAuth protocol at client side [here](#client-side-usage-caution)\r\n\r\nInit\r\n```js\r\nvar oauth = new OAuth({\r\n    consumer: {\r\n        public: 'xvz1evFS4wEEPTGEFPHBog',\r\n        secret: 'kAcSOqF21Fu85e7zjz7ZN2U4ZRhfV3WpwPAoE3Z7kBw'\r\n    },\r\n    signature_method: 'HMAC-SHA1'\r\n});\r\n```\r\n\r\nYour request data\r\n```js\r\nvar request_data = {\r\n\turl: 'https://api.twitter.com/1/statuses/update.json?include_entities=true',\r\n    method: 'POST',\r\n    data: {\r\n        status: 'Hello Ladies + Gentlemen, a signed OAuth request!'\r\n    }\r\n};\r\n```\r\n\r\nYour token (optional for some requests)\r\n```js\r\nvar token = {\r\n    public: '370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb',\r\n    secret: 'LswwdoUaIvS8ltyTt5jkRh4J50vUPVVHtR2YPi5kE'\r\n};\r\n```\r\n\r\nCall a request\r\n\r\n```js\r\n$.ajax({\r\n\turl: request_data.url,\r\n\ttype: request_data.method,\r\n\tdata: oauth.authorize(request_data, token)\r\n}).done(function(data) {\r\n\t//process your data here\r\n});\r\n```\r\n\r\nOr if you want to send OAuth data in request's header\r\n\r\n```js\r\n$.ajax({\r\n\turl: request_data.url,\r\n\ttype: request_data.method,\r\n\tdata: request_data.data,\r\n\theaders: oauth.toHeader(oauth.authorize(request_data, token))\r\n}).done(function(data) {\r\n\t//process your data here\r\n});\r\n```\r\n##Notes\r\n\r\n* Some OAuth requests without token use ``.authorize(request_data)`` instead of ``.authorize(request_data, {})``\r\n\r\n* **If you want an easier way to handle your OAuth request. Please visit [Simple OAuth](https://github.com/ddo/simple-oauth), it's a wrapper of this project, some features:**\r\n\t* Request Token method\r\n\t* Get Authorize link method\r\n\t* Access Token method\r\n\t* OAuth 2.0 support\r\n\t* Simpler syntax:\r\n \r\nNode.js:\r\n\r\n```js\r\nrequest(oauth.requestsToken(), function(error, response, body) {\r\n\t//process your data here\r\n});\r\n```\r\n```js\r\nrequest(oauth.accessToken({\r\n\toauth_verifier: '<verifier>'\r\n}), function(error, response, body) {\r\n\t//process your data here\r\n});\r\n```\r\n\r\njQuery:\r\n\r\n```js\r\n$.ajax(oauth.requestsToken()).done(function(data) {\r\n\t//process your data here\r\n});\r\n```\r\n```js\r\n$.ajax(oauth.accessToken({\r\n\toauth_verifier: '<verifier>'\r\n})).done(function(data) {\r\n\t//process your data here\r\n});\r\n```\r\n\r\n##Client Side Usage Caution\r\n\r\nOAuth is based around allowing tools and websites to talk to each other.\r\nHowever, JavaScript running in web browsers is hampered by security restrictions that prevent code running on one website from accessing data stored or served on another.\r\n\r\nBefore you start hacking, make sure you understand the limitations posed by cross-domain XMLHttpRequest.\r\n\r\nOn the bright side, some platforms use JavaScript as their language, but enable the programmer to access other web sites. Examples include:\r\n\r\n* **Google/Firefox/Safari extensions**\r\n* **Google Gadgets**\r\n* **Microsoft Sidebar**...\r\n\r\nFor those platforms, this library should come in handy.\r\n\r\n##Todo\r\n* RSA-SHA1 signature method\r\n\r\n##[Changelog](https://github.com/ddo/oauth-1.0a/releases)\r\n\r\n\r\n##Depencies\r\n* Browser: [crypto-js](https://code.google.com/p/crypto-js/)\r\n* Node: [crypto-js](https://github.com/evanvosberg/crypto-js)\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/ddo/oauth-1.0a/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n","google":"UA-24951846-11","note":"Don't delete this file! It's used internally to help with page regeneration."}